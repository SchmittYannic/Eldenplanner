@use "../../Variables" as v;

.customselect {
    position: relative;
    padding: v.$FormPadding;
    pointer-events: all;

    label:hover {
        color: v.$default-hover-label-font-color;

        input {
            color: v.$default-hover-font-color;
            border-color: v.$default-hover-border-color;
        }
    }

    label {
        position: relative;
        color: v.$default-label-font-color;
        font-size: v.$default-label-font-size;
        background-color: v.$default-label-background-color;
        cursor: v.$default-label-cursor;

        p {
            position: absolute;
            left: v.$default-label-x-offset;
            top: v.$default-label-y-offset;
        }

        input {
            width: 100%;
            height: v.$InputHeight;
            padding-top: v.$InputPaddingTop;
            padding-bottom: v.$InputPaddingBottom;
            padding-left: v.$InputPaddingLeft;
            padding-right: v.$ddBtnWidth;
            caret-color: v.$default-focus-label-font-color;

            color: v.$default-font-color;
            font-family: v.$default-font-family;
            font-size: v.$default-font-size;
            background-color: v.$default-background-color;
            border-style: v.$default-border-style;
            border-width: v.$default-border-width;
            border-color: v.$default-border-color;
            border-radius: v.$default-border-radius;

            &:read-only {
                cursor: pointer;
            }

            &:focus {
                border-style: v.$default-focus-border-style;
                border-width: v.$default-focus-border-width;
                border-color: v.$default-focus-border-color;
                border-radius: v.$default-focus-border-radius;
            }

            &:not(:placeholder-shown)+p,
            &:focus+p {
                font-size: v.$default-focus-label-font-size;
                top: v.$default-focus-label-y-offset;
                left: v.$default-focus-label-x-offset;
                cursor: v.$default-focus-label-cursor;
            }

            &:focus+p {
                color: v.$default-focus-label-font-color;
            }

            &:focus~button {
                color: v.$default-focus-label-font-color;
            }

            &:placeholder-shown:focus~button {
                transform: rotate(180deg);
            }
        }
    }

    .ddBtn-container {
        position: absolute;
        top: v.$FormPaddingTop;
        right: v.$FormPaddingRight;
        bottom: calc(v.$FormPaddingBottom + 1px);
        display: flex;
        align-items: center;
        background-color: v.$default-background-color;

        button {
            height: 21px;
            width: v.$ddBtnWidth;
            color: inherit;
            border: none;
            cursor: pointer;

            .ddBtn {
                width: 100%;
                height: 100%;
                display: flex;
                justify-content: center;
                align-items: center;
                margin: auto;
            }

            &:focus {
                border-radius: 50%;
                color: v.$default-hover-label-font-color;
                background-color: rgba(255, 255, 255, 0.432);
            }
        }
    }

    .optionslist {
        left: calc(.7em);
        right: calc(.7em);
        top: calc(v.$InputHeight + v.$InputPaddingTop + v.$InputPaddingBottom + v.$InputContainerGap);
        max-height: 200px;
        position: absolute;
        overflow-x: hidden;
        overflow-y: scroll;
        z-index: 70;
        background-color: hsla(v.$foreground);

        li {
            list-style: none;
            cursor: pointer;
            position: relative;
            overflow: hidden;

            p {
                padding: v.$OptionPadding;
                user-select: none;
            }
        }

        li:not(.focused-option) p:not(.selected-option) {
            background-color: v.$default-option-background-color;
            color: v.$default-option-font-color;
        }

        .focused-option p:not(.selected-option) {
            background-color: #666666;
            color: v.$default-option-font-color;
        }

        li:not(.focused-option) p:not(.selected-option):hover {
            background-color: #525252;
        }

        .focused-option p:not(.selected-option):hover {
            background-color: #7b7b7b;
        }

        .selected-option {
            background-color: #544320;
            color: #ffba27;
        }

        .focused-option .selected-option {
            background-color: #665020;
        }

        .selected-option:hover {
            background-color: #372b11;
        }

        .focused-option .selected-option:hover {
            background-color: #7b6027;
        }
    }

    &.disabled {
        * {
            pointer-events: none;
        }

        label input {
            color: v.$InputDisabledColor; //v.$default-label-font-color;
        }
    }

    .filter-substring {
        background-color: gray;
    }
}

// CustomStyles
.customselect.style1 {
    padding-top: .1rem;
    padding-bottom: .1rem;
    padding-right: 0;
    padding-left: 0;
    min-width: 60px;

    label {
        p {
            left: calc(v.$default-label-x-offset + .75rem);
        }

        input {
            background-color: hsla(v.$accent);
            border-color: transparent;
            border-radius: 5px;
            padding-top: 1.3rem;
            padding-bottom: 1.3rem;
            padding-left: .75rem;
            padding-right: calc(.5rem + 21px);

            &:not(:placeholder-shown)+p,
            &:focus+p {
                display: none;
            }
        }
    }

    .ddBtn-container {
        top: .1rem;
        bottom: .1rem;
        right: 0;
        width: calc(.5rem + 21px);
        background-color: hsla(v.$accent);
        border-radius: 5px;

        button {
            top: calc(1.4rem / 2);
            right: 1rem;
        }
    }

    .optionslist {
        left: 0;
        right: 0;
    }
}